#!/bin/bash
#

###################################################
# Name: Justin Siddon
# Date: 1/21/16
# Program: CS344 Program 1 - Average and Median Calculator.
# This script calculates the average and median of the passed file
# based on the user's passed arguments. Median and average can be
# calculated by "rows" or by "columns".
###################################################


# Interrupt, hangup, terminate remove all tmp files.
trap "{ rm -f $$tmp*; exit 1; }" SIGINT SIGHUP SIGTERM

###################################################
# Function: calculate
# Description: This function calculates the median and mean of a row of data
# containd in $tmpRowFile and adds them to a $tmpCalcResults file.
# Arguments:
#		$1 = the number of values in the row.
# 	$2 = the sum of the row's values.
###################################################
function calculate {
	# Define local variables.
	local numerator=0
	local denominator=0
	local average=0
	local median=0
	local middle=0
	local sortedLine
	local count=$1
	local sum=$2

	# Calculate median
	sortedLine=( $(cat $tmpRowFile | sort) )
	middle=$(($count/2))
	median=${sortedLine[$middle]}		# Grab middle val, if even it will grab the larger of two value, if odd it will grab right in the middle.

	# Calculate average
	numerator=$(($sum*10))
	denominator=$count
	average=$(((($numerator/$denominator)+5)/10))				# Round average up or down if >=1.5 round up, if <1.5 round down.

	# Print out both calculated values to the calculated results file.
	echo "$average $median" >> $tmpCalcResults
}

###################################################
# Function: calcRows
# Description: This function calculates the total sum of each row and number of
# values in each row then calls the 'calculate' function for each row.
# Both '-r' and '-c' use this function so duplicate logic doesn't need to be created/maintained.
# Arguments: None
###################################################
function calcRows {
	# Define local variables.
	local rowSum
	local val
	local itr
	local valCount

	# Loop through each line in file.
	while read line
	do
		rowSum=0					# Initalize values that need to be calculated for each line.
		val=0
		itr=0
		valCount=0

		# Loop through each value in line to calculate sum and count number of numbers.
		for val in ${line[@]}
		do
			echo "$val" >> $tmpRowFile				# Write each element in the line to tmp file so 'calculate' can read it.
			rowSum=$(($rowSum + $val))			# Add individual value to total row sum.
			valCount=$(($valCount + 1))     # Increment counter for number of elements.
		done

		calculate $valCount $rowSum  			# Call calculate function, pass it the number of numbers and the row's sum.
		rm $tmpRowFile										# Remove the single row temp file.

	done < $tmpInputCopy 								# Read from the copy of input made.

}


###################################################
# Function: columnConvert
# Description: Loops through each column in file. Converts file to a temporary
# file organized by rows so the same 'calcRows' function can be used.
# Arguments: None
###################################################
function columnConvert {
	local convertedRowFile=$$convertedRowFile							# File to store row organized values based of PID.
	local columns="$(head -n 1 $tmpInputCopy | wc -w)"		# Get the number of columns.
	local itr=0																						# Initialize iterator to loop through columns.

	while [ $itr -lt $columns ]
	do
		# Create a row from the column elements.
		while read columnString
		do
			column=( $(echo $columnString) )								# Convert column line into an array.
			echo -n "${column[$itr]} " >> $convertedRowFile	# Place only one character from line into tmp file.
		done < $tmpInputCopy

		echo "" >> $convertedRowFile											# Add newline to the end of the row.
		itr=$(($itr+1))																		# Increment the column counter.
	done

	# Put the contents of the convertedRowFile into the tmpInputCopy file since
	# that is where 'calcRows' expects to read values from.
	cat $convertedRowFile > $tmpInputCopy
	rm $convertedRowFile																# Remove the convertedRowFile, we don't need anymore.
}

###################################################
# Function: printResults
# Description: This function prints out the calculated results in a format specified by the passed
# arguement that are stored in the $tmpCalcResults.
# Arguments: $1, the type of results to print out.
# 	1 = row calculation results.
#		2 = column calculation results.
###################################################
function printResults {

	# Row Cacl. If 1, we are printing out the results of a row calculation.
	if [ $1 -eq 1 ]
	then
		echo "Average Median"																# Print value headings out.
		while read result_line
		do
			resultRow=( $(echo $result_line) )
			echo "${resultRow[0]}	${resultRow[1]}"						# Print the average and median.
		done < $tmpCalcResults

	# Column Calc. If 2, we are printing out the results of a column calcuation.
	elif [ $1 -eq 2 ]
	then
		numElements=2																				# Initialize number of elements to print which is two because we are showing median and mode.
		elem=0																							# Initialize iterator.

		while [ $elem -lt $numElements ]										# Covert the row layout back to column layout
		do
			if [ $elem -eq 0 ]																# First value is average.
			then
				echo "Average"
			else
				echo "Median"																		# Second value is median.
			fi

			# Read each line from calculation results but only print out column values.
			while read result_line
			do
				resultRow=( $(echo $result_line) )							# Convert row line into an array.
				echo -n "${resultRow[$elem]} "									# Only show 1 value from array.
			done < $tmpCalcResults

			echo ""																						# Space the values appropriately.
			elem=$(($elem+1))								# Increment iterator.
		done
	fi
}

###################################################
# Function: copyInput
# Description: This function copies the data input into a tmp file so we can read from
# it multiple times. Sets global variable $tmpInputCopy as data input by user.
# Arguments: none
###################################################
function copyInput {
	tmpInputCopy=$$tmpInputCopy										# Temp file to save input source, based in PID.

	while read data
	do
		echo $data >> $tmpInputCopy									# Save input into global variable.
	done < "${file:-/dev/stdin}"									# Get from $file if avail, otherwise from from stdin.

	if [ ! -s $tmpInputCopy ]											# Check if the provided input was blank.
	then
		exit 1
	fi

}

# Main script that runs everytime.

# Setup some global variables.
err="Usage: stats {-rows|-cols} [file]"						# Standard usage error text to use throughout program.
tmpRowFile=$$tmpRowFile														# Temp file to hold columns that have been 'pivoted' to rows for calc.
tmpCalcResults=$$tmpCalcResults										# Temp file to hold calcuation results.
name=$(echo $1 | cut -c2-2)												# Get provided sort option, the first character following '-' so '-col' means 'file=c'.


# Validate number of command line arguments is correct.
if [[ $# -gt 2 || $# -lt 1 ]]		 	# More than two command line arguments were passed or no command line args.
then
	echo "$err">&2
	exit 1

elif [ $# -eq 2 ]									# 2 Args were passed so check that the second is a readable file.
then
	if ! [ -r $2 ]									# Make sure file is readable.
	then
		echo "Can't read input">&2    # Write error message.
		exit 1												# Exit with fail.

	else														# File is readable so assign to variable.
		file=$2

	fi

fi

# Validate arguements are correct.
if [ "$name" = "c" ]		# Calc by columns.
then
	copyInput							# Copy input values into a separate tmp file.
	columnConvert					# Convert file columns to rows.
	calcRows							# Calc values for the rows.
	printResults 2				# Print results, '2' indicates column calc.

elif [ "$name" = "r" ]	# Calc by rows.
then
	copyInput							# Copy input values into a separate tmp file.
	calcRows							# Calc values for the rows.
	printResults 1				# Print results, '1' indicates row calc.

else										# Sort option invalid, show err and exit.
	echo $err>&2
	exit 1

fi

# Remove all temp files created during script. Removes all files labeled [PID]tmp[STRING]
rm -f $$tmp*;

exit 0									# End program.
