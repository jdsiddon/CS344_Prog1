#!/bin/bash
#

err="Usage: stats {-rows|-cols} [file]"
sort=$1

# Validate command line arguments.
if [[ $# -gt 2 || $# -lt 1 ]]		 	# More than two command line arguments were passed or no command line args.
then
	echo "$err"
	exit 1
elif [ $# -eq 2 ]				# 2 Args were passed so check that the second is a readable file.
then
	
	if ! [ -r $2 ]				# Make sure file is readable.
	then 
		echo "Can't read input"
		exit 1
	else					# File is readable so assign to variable.
		file=$2
	fi
fi

# Arguments valid so lets declare variables.
name=$(echo $1 | cut -c2-2)		# Sort option, the first character following '-' so '-col' means 'file=c'. 
row_sum=0
elem_count=0
avg=0
median=0
round_up=0.5
rounded_avg=0
numerator=0



function calcRows {
	# Loop through each line in file. ROWS
	echo "Average Median"		# Print value headings out.
	while read line
	do
		# Loop through each value in line.
		for elem in ${line[@]}
		do
			echo "$elem" >> tmp			# Write each element in the line to tmp file.
			row_sum=`expr $row_sum + $elem`		# Add individual value to total row sum.
			elem_count=`expr $elem_count + 1`       # Increment counter for number of elements.
		done

		# Calculate median
		sorted_line=($(cat tmp | sort))
		middle=$(($elem_count/2))
		median=${sorted_line[$middle]}		# Grab middle val, if even it will grab the larger of two value, if odd it will grab right in the middle.
	
		# Calculate average
		numerator=$(($row_sum*10))
		denominator=$elem_count
		avg=$(((($numerator/$denominator)+5)/10))
	
		# Print out both calculated values.	
		echo "$avg       $median"

		# Reset variables for row calculation.	
		row_sum=0
		elem_count=0
		rm tmp

	done < "${file:-/dev/stdin}" 			# $1 is the first command line arg.
}

# Loop through each column in file.
# Converts file to a normal row organized file, then calls the standard calculate function.
function columnConvert {
	touch tmpConvert	# Create temp file
	
	columns="$(head -1 ${file:-/dev/stdin} | wc -w)"		# Get the number of columns contained in stdin or file.

	echo "Col: $columns"
	column_num=1
	tmp="tmpConvert"
	
	while [ $column_num -le $columns ]
	do
		# Create a row from the column elements.
		while read column_string
		do
			column=( echo $column_string )
			echo -ne "${column[$column_num]} " >> $tmp
		done < "${file:-/dev/stdin}"

		echo "" >> $tmp
		column_num=$(($column_num+1))
	done
	
	file=$(echo $tmp)
	
}


if [ "$name" = "c" ]		# Calc by columns.
then
	columnConvert
	calcRows
	rm tmpConvert

elif [ "$name" = "r" ]		# Calc by rows.
then
	calcRows

else				# Sort option invalid, show err and exit.
	echo $err
	exit 1

fi

exit 0
